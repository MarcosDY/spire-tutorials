apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-server
  namespace: spire
data:
  server.conf: |
    server {
      bind_address = "0.0.0.0"
      bind_port = "8081"
      registration_uds_path = "/run/spire/sockets/registration.sock"
      # NOTE: Change this to your trust domain
      trust_domain = "example.org"
      data_dir = "/run/spire/data"
      log_level = "DEBUG"
      experimental {
        // Turns on the bundle endpoint (required, true)
        bundle_endpoint_enabled = true
 
        // The address to listen on (optional, defaults to 0.0.0.0)
        // bundle_endpoint_address = "0.0.0.0"
 
        // The port to listen on (optional, defaults to 443)
        bundle_endpoint_port = 8443
      } 
      #AWS requires the use of RSA.  EC cryptography is not supported
      ca_key_type = "rsa-2048"
    
      # Creates the iss claim in JWT-SVIDs.  This should be the same domain that you
      # use for the OIDC discovery document (configured in the oidc-discovery-provider
      # config file
      jwt_issuer = "https://example.org"

      
      upstream_bundle = true
      svid_ttl = "1h"
      ca_subject = {
        country = ["US"],
        organization = ["SPIFFE"],
        common_name = "",
      }
    }

    plugins {
      DataStore "sql" {
        plugin_data {
          database_type = "sqlite3"
          connection_string = "/run/spire/data/datastore.sqlite3"
        }
      }

      NodeAttestor "k8s_sat" {
        plugin_data {
          clusters = {
            # NOTE: Change this to your cluster name
            "oidc-provider-example" = {
              use_token_review_api_validation = true
              service_account_whitelist = ["spire:spire-agent"]
            }
          }
        }
      }

      NodeResolver "noop" {
        plugin_data {}
      }

      KeyManager "disk" {
        plugin_data {
          keys_path = "/run/spire/data/keys.json"
        }
      }

      Notifier "k8sbundle" {
        plugin_data {
        }
      }
    }
